name: CI/CD Backstage - Azure

on:
  push:
    branches: [ prod ]
  pull_request:
    branches: [ prod ]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'
  AZURE_WEBAPP_NAME: 'backstage-fds'

jobs:
  # ========== JOB 1: TESTES UNIT√ÅRIOS ==========
  test:
    name: Executar Testes Unit√°rios Django
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout do c√≥digo
      uses: actions/checkout@v3
    
    - name: Configurar Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache de depend√™ncias Python
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
    
    - name: Instalar depend√™ncias Python
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Executar testes unit√°rios Django
      run: |
        python manage.py test
      env:
        TARGET_ENV: 'development'
        TMDB_API_KEY: 'e2bf84876d17e898ef5fc63655cd5040'
    
    - name: Verificar migra√ß√µes pendentes
      run: |
        python manage.py makemigrations --check --dry-run
      env:
        TARGET_ENV: 'development'

  # ========== JOB 2: TESTES E2E CYPRESS ==========
  test-e2e:
    name: Executar Testes E2E (Cypress)
    needs: test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout do c√≥digo
      uses: actions/checkout@v3
    
    - name: Configurar Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Configurar Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
    
    - name: Cache de depend√™ncias Python
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
    
    - name: Cache de depend√™ncias Node
      uses: actions/cache@v3
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
    
    - name: Instalar depend√™ncias Python
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Instalar depend√™ncias Node
      run: |
        npm ci
    
    - name: Preparar banco de dados de teste
      run: |
        python manage.py migrate
        python manage.py collectstatic --noinput
      env:
        TARGET_ENV: 'development'
        TMDB_API_KEY: 'e2bf84876d17e898ef5fc63655cd5040'
    
    - name: Criar script delete_users.py se n√£o existir
      run: |
        if [ ! -f delete_users.py ]; then
          cat > delete_users.py << 'EOF'
        import os
        import django
        
        os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'setup.settings')
        os.environ['TARGET_ENV'] = 'development'
        django.setup()
        
        from django.contrib.auth.models import User
        
        # Deleta usu√°rios de teste
        deleted = User.objects.filter(username__icontains='TesteCypress').delete()
        print(f"Usu√°rios deletados: {deleted[0]}")
        EOF
        fi
        chmod +x delete_users.py
    
    - name: Iniciar servidor Django em background
      run: |
        python manage.py runserver 0.0.0.0:8000 > django.log 2>&1 &
        echo $! > django.pid
        echo "Aguardando servidor iniciar..."
        sleep 10
      env:
        TARGET_ENV: 'development'
        TMDB_API_KEY: 'e2bf84876d17e898ef5fc63655cd5040'
    
    - name: Verificar se servidor est√° rodando
      run: |
        curl -f http://localhost:8000 || (cat django.log && exit 1)
    
    - name: Executar testes Cypress
      uses: cypress-io/github-action@v6
      with:
        wait-on: 'http://localhost:8000'
        wait-on-timeout: 120
        browser: chrome
        record: false
        config-file: cypress.config.js
      env:
        CYPRESS_BASE_URL: 'http://localhost:8000'
    
    - name: Parar servidor Django
      if: always()
      run: |
        if [ -f django.pid ]; then
          kill $(cat django.pid) || true
        fi
    
    - name: Upload screenshots em caso de falha
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: cypress-screenshots
        path: cypress/screenshots
        retention-days: 7
    
    - name: Upload v√≠deos dos testes
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: cypress-videos
        path: cypress/videos
        retention-days: 7
    
    - name: Exibir logs do Django em caso de falha
      if: failure()
      run: |
        echo "===== LOGS DO DJANGO ====="
        cat django.log

  # ========== JOB 3: BUILD ==========
  build:
    name: Build do Projeto
    needs: [test, test-e2e]
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout do c√≥digo
      uses: actions/checkout@v3
    
    - name: Configurar Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache de depend√™ncias Python
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
    
    - name: Instalar depend√™ncias
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Coletar arquivos est√°ticos
      run: |
        python manage.py collectstatic --noinput
      env:
        TARGET_ENV: 'development'
        DJANGO_STATIC_URL: '/static/'
    
    - name: Verificar build
      run: |
        echo "üì¶ Build conclu√≠do com sucesso"
        ls -la staticfiles/

  # ========== JOB 4: DEPLOY AZURE ==========
  deploy:
    name: Deploy para Azure
    needs: [test, test-e2e, build]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/prod'
    
    steps:
    - name: Checkout do c√≥digo
      uses: actions/checkout@v3
    
    - name: Configurar Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Criar ambiente virtual e instalar depend√™ncias
      run: |
        python -m venv antenv
        source antenv/bin/activate
        pip install -r requirements.txt
    
    - name: Coletar arquivos est√°ticos para produ√ß√£o
      run: |
        source antenv/bin/activate
        python manage.py collectstatic --noinput
      env:
        TARGET_ENV: 'production'
        SECRET_KEY: ${{ secrets.SECRET_KEY }}
    
    - name: Comprimir arquivos para deploy
      run: |
        zip -r deploy.zip . -x "*.git*" "*.github*" "*__pycache__*" "*.pyc" "db.sqlite3" "node_modules/*" "cypress/*"
    
    - name: Deploy para Azure Web App
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ env.AZURE_WEBAPP_NAME }}
        publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
        package: deploy.zip
    
    - name: Notificar sucesso
      if: success()
      run: |
        echo "‚úÖ Deploy realizado com sucesso!"
        echo "üé¨ Backstage est√° no ar no Azure!"
        echo "üåê URL: https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net"
    
    - name: Notificar falha
      if: failure()
      run: |
        echo "‚ùå Deploy falhou. Verifique os logs no Azure Portal."
        echo "üìã Acesse: https://portal.azure.com"
